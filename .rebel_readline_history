1606697275092:(/ 9 5)
1606701916643:(/ 0.1 0.2)
1606705085355:(quit)
1606705092020:(exit)
1606707710686:(indexed [])
1606707814959:([1 2] 0)
1606708102891:(= {1 2} {1 2})
1606708108125:(= {1 2} {1 3\n          })
1606708135808:(= )
1606708396450:(get-in [] 1)
1606708409209:(get-in [] {:1 1}\n        \n        ))
1606708412013:(get-in [] {:1 1}\n        \n        )
1606708422088:(get-in [:1] {:1 1}\n        \n        )
1606708461511:(get-in {} [])
1606708472325:(get-in 1\n        [])
1606710271168:((filter odd?) [1 2 3])
1606716936483:(cons 1 (list 4 3))
1606716975667:(drop 1 [1 2])
1606717395364:(drop 10 [])
1606718732970:(drop 0 (list 1 2 3))
1606718985353:(nth [1 2 3] 0)
1606721917226:(nth [1 2 3] 1\n     ))
1606726483077:(def temp 1)
1606726490069:(keyword #'temp)
1606726504298:(keyword (symbol #'temp))
1606726969926:guis
1606728854700:(js/setTimeout #(print "hi") 1000)
1606729041461:(print 1)
1606729062226:(.-activeElement js/document)
1606729090386:(aset js/document "activeElement" nil)
1606729093393:(.-activeElement js/document)
1606729104204:(aset js/document "activeElement" js/null)
1606730006123:(update {} 1 identity\n        )
1606730016629:(conj nil 1)
1606734768240:(ns seven-guis.cells (:require [instaparse.core :as insta]))
1606734775416:((insta/parser "src/cells.insta") "hello =1")
1606734804480:((insta/parser "src/cells.insta") "hello\n")
1606735006734:(insta/parser "src/cells.insta")
1606735021868:(insta/parser "./\nsrc/cells.insta")
1606735064428:(insta/parser "/\nsrc/cells.insta")
1606735684600:(ord \\a)
1606735693972:(int \\a)
1606735736293:(int \\b\n     )
1606735745898:(int \\\\b\n     )
1606735793191:(.charCodeAt "a" 0)
1606735836504:(.charCodeAt "A\n" 0)
1606737867830:(set? 1)
1606737873880:(set? #{})
1606741533741:(boolean ((insta/parser "src/cells.insta") "hello\n"))
1606745677474:(js/parseInt "hello")
1606747590397:(js/parseInt "1")
1606748336555:(seq? [1 2])
1606748346793:(coll? "")
1606757059313:(assoc [] 2 2)
1606757171245:(repeat 3 4)
1606770286772:(map + [1 2] [0 1])
1606770301670:(mapv\n + [1 2] [0 1])
1606779904278:(rand-int 10)
1606837261585:(+ 1 1)
1606837274107:(list [1 2])
1606837290028:(seq [1 2])
1606837663012:(map print {1 2 3 4})
1606838217173:(defn update-trie\n  "last name is key in trie, first name is added to the end"\n  [trie {last-name :last first-name :first}]\n  (update-in trie\n             (conj (vec last-name) :full)\n             #(conj (or % (sorted-set)) first-name)))
1606838225321:(defn init-trie [names]\n  (reduce update-trie {} names))
1606838238163:(init-trie ["hello" "hell" "hooya"])
1606838267320:(update-trie {} {:last "hi" :first "ho"})
1606838280179:(defn random-person []\n  (let [random-name #(str (rand-int 100000))]\n    {:first (random-name) :last (random-name)}))
1606838292445:(update-trie {} (random-person))
1606838333277:(init-trie (repeatedly 5 (random-person)))
1606838341988:(init-trie (repeatedly 5 random-erson)))
1606838350783:(init-trie (repeatedly 5 random-person)))
1606838596058:(mapcat vec {1 {2 3} 4 5})
1606838785566:(map identity {1 2})
1606838868445:(pop [1 2 3])
1606839768802:(apply +)
1606840023890:(seq "hele")
1606840139487:(sorted-dict "hello" :hey)
1606840148671:(sorted-map "hello" :hey)
1606840158763:(sorted-map "hello" :hey :aaa)
1606840168390:(sorted-set "hello" :hey :aaa)
1606841398517:(def myv (vec (range 100000)))
1606841413028:(time (seq myv))
1606841430848:(time (lazy-seq myv))
1606841466782:(myv 100)
1606841470902:(myv 300)
1606841509512:(time (iterator-seq myv))
1606841539253:(time (sequence myv))
1606841561413:(time (sequence (vec (range 1000))\n                ))
1606841574504:(do(time (sequence (vec (range 1000))\n                )) nil)
1606841597525:(do(time (sequence myv\n                )) nil)
1606841605919:(do(time (seq myv\n                )) nil)
1606848204705:(str "h" "i")
1606848837914:(subvec [1 2 3] 0 2)
1606848841536:(subvec [1 2 3] 0 3)
1606850565033:(def lss (into (sorted-set) (range 100000)))
1606850624758:(time rsubseq lss < 10000)
1606850631168:(time (rsubseq lss < 10000))
1606850642500:(time (rsubseq lss < 10000) false)
1606850648472:(time (do(rsubseq lss < 10000) false))
1606850654184:(time (do(rsubseq lss < 1000000) false))
1606850712669:(def lss (into (sorted-set) (map str (range 10000000)))\n  )
1606850727403:(def lss (into (sorted-set) (map str (range 100000)))\n  )
1606850869617:(def lss (into (sorted-set) (map str) (range 100000)))
1606850900480:(time (do (rsubseq lss < "555"))))
1606852568378:(rsubseq #{"hilow" "hi" "hieee" "ha" "he"} >= "hi")
1606852593960:(rsubseq (sorted-set "hilow" "hi" "hieee" "ha" "he") >= "hi")
1606856070271:(split-at 1 (range 10))
1606856103974:(time (do (split-at 10000 (range 100000)) nil))
1606856509419:(identical? () nil)
1606856518715:(identical? () ()\n            \n            )
1606867615815:(count [[Range Pairs] [1 sum=A2+A3] [2 sum=A3+A4] [3 sum=A4+A5] [4 sum=A2+A4] [5 sum=A3+A5] [6 sum=A4+A6] [7 sum=A2+A5] [8 sum=A3+A6] [9 sum=A4+A7] [10 sum=A2+A6] [11 sum=A3+A7] [12 sum=A4+A8] [13 sum=A2+A7] [14 sum=A3+A8]])
1606867640542:(apply max (map count [[1 1] [1 1 1]]))
1606878678032:(pop #{1 2})
1606878713194:(first #{1})
1606878726624:(split-at 1  #{1 2 3})
1606878773144:(rest #{1 2 3})
1606880464659:(not-empty [1])
1606882414666:(defn queue\n  ([] (cljs.core/PersistentQueue.EMPTY))\n  ([coll]\n   (reduce conj cljs.core/PersistentQueue.EMPTY coll)))
1606882437991:(def que (queue [1 2 3 4 5]))
1606882443311:(first que)
1606882447453:(last que)
1606882450906:(pop que)
1606882474390:(conj que 0)
1607021243139:(peek [1 2])
1607021780720:"hi\n"
1607021818289:@last-global-state
1607021826632:last-global-state
1607022321381:(sorted-set [1 nil] [2 {}])
1607022331066:(sorted-set [1 nil] [2 ""])
1607022337079:(sorted-set [1 nil] [1 ""])
1607022343320:(sorted-set [1 {}] [1 ""])
1607022351071:(sorted-set [1 {}] [1 []]\n            )
1607022374046:(sorted-set [1 {1 1}] [1 {2 2}]\n            )
1607027988533:(pop (sorted-set 1 2 3))
1607028547698:(first (sorted-set 1 2))
1607098400244:(def example-csv-conv\n  (apply str (interpose "\\n" (map #(for [x (range 97 (+ 97 25))] (str "=" (char x) % "+" (char x) (inc  %) "+" (char x) (+ 2 %))) (range 99)))))
1607098404896:example-csv-conv
1607098437894:(def example-csv-conv\n  (apply str (interpose "\\n" (apply str (map #(for [x (range 97 (+ 97 25))] (str "=" (char x) % "+" (char x) (inc  %) "+" (char x) (+ 2 %))) (range 99))))))
1607098443159:example-csv-conv
1607098472817:(def example-csv-conv\n  (apply str (interpose "\\n" (map #(apply str (for [x (range 97 (+ 97 25))] (str "=" (char x) % "+" (char x) (inc  %) "+" (char x) (+ 2 %)))) (range 99)))))
1607098477868:example-csv-conv
1607102076330:(reverse [1 2])
1607110175449:(+ 1 "hi")
1607110823439:(interpose 1 [2 3 4 5])
1607110843394:(apply str (interpose "\\n" ["hi" "ho" "he"]))
1608182231142:(+ 1 2 3 4)
1611183883663:quit
1611183887448:(quit)
1611183921832:(exit)
1611183922866:exit
1611259234199:(+ 1 2)
