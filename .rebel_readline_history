1606697275092:(/ 9 5)
1606701916643:(/ 0.1 0.2)
1606705085355:(quit)
1606705092020:(exit)
1606707710686:(indexed [])
1606707814959:([1 2] 0)
1606708102891:(= {1 2} {1 2})
1606708108125:(= {1 2} {1 3\n          })
1606708135808:(= )
1606708396450:(get-in [] 1)
1606708409209:(get-in [] {:1 1}\n        \n        ))
1606708412013:(get-in [] {:1 1}\n        \n        )
1606708422088:(get-in [:1] {:1 1}\n        \n        )
1606708461511:(get-in {} [])
1606708472325:(get-in 1\n        [])
1606710271168:((filter odd?) [1 2 3])
1606716936483:(cons 1 (list 4 3))
1606716975667:(drop 1 [1 2])
1606717395364:(drop 10 [])
1606718732970:(drop 0 (list 1 2 3))
1606718985353:(nth [1 2 3] 0)
1606721917226:(nth [1 2 3] 1\n     ))
1606726483077:(def temp 1)
1606726490069:(keyword #'temp)
1606726504298:(keyword (symbol #'temp))
1606726969926:guis
1606728854700:(js/setTimeout #(print "hi") 1000)
1606729041461:(print 1)
1606729062226:(.-activeElement js/document)
1606729090386:(aset js/document "activeElement" nil)
1606729093393:(.-activeElement js/document)
1606729104204:(aset js/document "activeElement" js/null)
1606730006123:(update {} 1 identity\n        )
1606730016629:(conj nil 1)
1606734768240:(ns seven-guis.cells (:require [instaparse.core :as insta]))
1606734775416:((insta/parser "src/cells.insta") "hello =1")
1606734804480:((insta/parser "src/cells.insta") "hello\n")
1606735006734:(insta/parser "src/cells.insta")
1606735021868:(insta/parser "./\nsrc/cells.insta")
1606735064428:(insta/parser "/\nsrc/cells.insta")
1606735684600:(ord \\a)
1606735693972:(int \\a)
1606735736293:(int \\b\n     )
1606735745898:(int \\\\b\n     )
1606735793191:(.charCodeAt "a" 0)
1606735836504:(.charCodeAt "A\n" 0)
1606737867830:(set? 1)
1606737873880:(set? #{})
1606741533741:(boolean ((insta/parser "src/cells.insta") "hello\n"))
1606745677474:(js/parseInt "hello")
1606747590397:(js/parseInt "1")
1606748336555:(seq? [1 2])
1606748346793:(coll? "")
1606757059313:(assoc [] 2 2)
1606757171245:(repeat 3 4)
1606770286772:(map + [1 2] [0 1])
1606770301670:(mapv\n + [1 2] [0 1])
1606779904278:(rand-int 10)
1606837261585:(+ 1 1)
1606837274107:(list [1 2])
1606837290028:(seq [1 2])
1606837663012:(map print {1 2 3 4})
1606838217173:(defn update-trie\n  "last name is key in trie, first name is added to the end"\n  [trie {last-name :last first-name :first}]\n  (update-in trie\n             (conj (vec last-name) :full)\n             #(conj (or % (sorted-set)) first-name)))
1606838225321:(defn init-trie [names]\n  (reduce update-trie {} names))
1606838238163:(init-trie ["hello" "hell" "hooya"])
1606838267320:(update-trie {} {:last "hi" :first "ho"})
1606838280179:(defn random-person []\n  (let [random-name #(str (rand-int 100000))]\n    {:first (random-name) :last (random-name)}))
1606838292445:(update-trie {} (random-person))
1606838333277:(init-trie (repeatedly 5 (random-person)))
1606838341988:(init-trie (repeatedly 5 random-erson)))
1606838350783:(init-trie (repeatedly 5 random-person)))
1606838596058:(mapcat vec {1 {2 3} 4 5})
1606838785566:(map identity {1 2})
1606838868445:(pop [1 2 3])
1606839768802:(apply +)
1606840023890:(seq "hele")
1606840139487:(sorted-dict "hello" :hey)
1606840148671:(sorted-map "hello" :hey)
1606840158763:(sorted-map "hello" :hey :aaa)
1606840168390:(sorted-set "hello" :hey :aaa)
