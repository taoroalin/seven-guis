(ns seven-guis.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; utils
(def event-value #(-> % .-target .-value))

;; components
;; 

(defn box [name contents]
  [:div {:style {:border "1px solid black" :border-radius "4px" :padding "10px"}} [:h3 name] contents])

(defn counter []
  (let [click-count (atom 0)]
    (fn []
      [:div
       "The button has been clicked "  @click-count " times."
       [:input {:type "button" :value "Click me!"
                :on-click #(swap! click-count inc)}]])))

(def celsius->fahrenheit #(+ 32 (* (/ 9 5) %)))
(def fahrenheit->celsius #(* (/ 5 9) (- % 32)))
(defn temperature-converter []
  (let [temperature (atom nil)]
    (fn []
      [:div
       [:input {:type "number" :on-change #(reset! temperature (event-value %)) :value (.round js/Math @temperature)}] "Celsius ="
       [:input {:type "number" :on-change #(reset! temperature (fahrenheit->celsius (event-value %))) :value (.round js/Math (celsius->fahrenheit @temperature))}] "Fahrenheit"])))

(defn flight-scheduler []
  (let [flight-type (atom "one-way flight")
        start (atom nil)
        end (atom nil)]
    (fn []
      (print @flight-type @start @end)
      [:div {:style {:display "flex" :flex-direction "column" :max-width 200}}
       [:select {:value @flight-type
                 :on-change #(reset! flight-type (event-value %))}
        [:option "one-way flight"]
        [:option "return flight"]]
       [:input {:type "date" :on-change #(reset! start (-> % .-target .-valueAsDate))}]
       [:input {:type "date" :value @end :on-change #() :disabled (= @flight-type "one-way flight")}]
       [:button {:on-click #(print "You have booked a" @flight-type "on" @start (if (= @flight-type "return flight") (str "returning on" @end ".") "."))} "Book"]])))


(defn home-page []
  (fn []
    [:span.main
     [:h1 "Tao Lin's Seven GUIs"]
     [box
      "Counter" [counter]]
     [box "Temperature Converter" [temperature-converter]]
     [box "Flight Scheduler" [flight-scheduler]]]))
;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of seven-guis"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of seven-guis")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About seven-guis"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About seven-guis"]]]
       [page]
       [:footer
        [:p "seven-guis was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
